#------------------------------
#-- eink_1.yaml
#-- Affiche un mini dashboard sur un mini display e-ink 
#-- L'écran est découpé en 4x3 zones où l'on peut afficher l'état d'un paramètre et un mini level meter
#--

# sources: 
# https://community.home-assistant.io/t/using-ttgo-epaper-display-with-esphome/168877
# https://github.com/esphome/issues/issues/1458
# https://github.com/lewisxhe/Esp-badge/blob/3dcb646971/schematic/T5_V2.3.pdf
# http://www.lilygo.cn/prod_view.aspx?TypeId=50031&Id=1149&FId=t3:50031:3
# https://fr.aliexpress.com/item/32869729970.html
# https://github.com/Xinyuan-LilyGO/LilyGo-T5-Epaper-Series?spm=a2g0o.detail.1000023.17.6b1d6399uhwyEP
# https://github.com/lewisxhe/GxEPD/blob/master/src/GxDEPG0213BN/GxDEPG0213BN.h
# https://www.e-paper-display.com/GDEH0213B72%20V1.1%20Specification4d82.pdf
# https://www.good-display.com/product/218.html
# https://esphome.io/components/binary_sensor/esp32_touch.html

esphome:
  name: eink1
  platform: ESP32
  board: esp32dev

wifi:
  networks:
  - ssid: !secret SSID
  - password: !secret SSID_pwd
  - ssid: !secret SSID_iPhoneYvan
  - password: !secret SSID_pwd_iPhoneYvan

  ap:
    ssid: "FB Hotspot"
    password: !secret FB_pwd

captive_portal:
esp32_ble_tracker:

logger:
#    level: VERBOSE

api:
  password: !secret api_pwd

ota:
  password: !secret ota_pwd

web_server:
  port: 80

time:
  - platform: sntp
    id: sntp_time

# Définition des senseurs numériques
sensor:
  - platform: wifi_signal
    name: "eInk 1 Signal Wi-Fi"
    id: wifi_power
    update_interval: 10s
  - platform: uptime
    name: "eInk 1 Uptime"
    update_interval: 120s

  - platform: adc
    pin: GPIO35
    id: "bat_v"
    name: "eInk 1 Battery Voltage"
    update_interval: 120s
    attenuation: 6db
    unit_of_measurement: "V"
    filters:
      - multiply: 1.89
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15

  - platform: template
    id: "bat_per"
    name: "eInk 1 Battery Percentage"
    unit_of_measurement: '%'
    update_interval: 120s
    accuracy_decimals: 0
    lambda: |-
      return ((id(bat_v).state-3) /1.2 * 100.00);

  - platform: homeassistant
    name: "Temp Etage"
    entity_id: sensor.tunex_7403_temp
    id: temp_etage
  - platform: homeassistant
    name: "Hum Etage"
    entity_id: sensor.tunex_7403_hum
    id: hum_etage

  - platform: homeassistant
    name: "Temp Rez"
    entity_id: sensor.tunex_c302_temp
    id: temp_rez
  - platform: homeassistant
    name: "Hum Rez"
    entity_id: sensor.tunex_c302_hum
    id: hum_rez

  - platform: homeassistant
    name: "Temp Sous-sol"
    entity_id: sensor.tunex_fa01_temp
    id: temp_ss
  - platform: homeassistant
    name: "Hum Sous-sol"
    entity_id: sensor.tunex_fa01_hum
    id: hum_ss

  - platform: homeassistant
    name: "Temp Ext"
    entity_id: sensor.yverdon_les_bains_temperature
    id: temp_ext
  - platform: homeassistant
    name: "Hum Ext"
    entity_id: sensor.yverdon_les_bains_humidity
    id: hum_ext
  - platform: homeassistant
    name: "Wind Ext"
    entity_id: sensor.yverdon_les_bains_wind_speed
    id: wind_ext

# Définitions des senseurs textes
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: wifi_ip
    ssid:
      name: ESP Connected SSID
      id: wifi_ssid
  - platform: homeassistant
    name: "Bat Etage"
    entity_id: sensor.tunex_7403_bat
    id: bat_etage
  - platform: homeassistant
    name: "Bat Rez"
    entity_id: sensor.tunex_c302_bat
    id: bat_rez
  - platform: homeassistant
    name: "Bat Sous-sol"
    entity_id: sensor.tunex_fa01_bat
    id: bat_ss

# Définition du bouton physique
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      mode: INPUT_PULLUP
      inverted: True
    name: "Button eInk Refresh"
    on_press:
      - component.update: z_eink

# Presence based on BLE Service UUID
  - platform: ble_presence
    service_uuid: '00001525-9F03-0DE5-96C5-B8F4F3081186'
    name: "BLE Lit Yvan"

# Définition du bouton virtuel
switch:
  - platform: template
    name: "Switch eInk Refresh"
    turn_on_action:
      - component.update: z_eink
    
# Définition des polices de caractères
font:
  - file: 'arialn.ttf'
    id: font1
    size: 11
  - file: 'arialn.ttf'
    id: font2
    size: 13
    # caractères français
    glyphs: "+\"*ç%&/()=?'!$;:_,.-<>° 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzàâäéèêëïîôöùûüÿ"
  - file: "Ldfcomicsans-jj7l.ttf"
    id: font_cs
    size: 20

# Définition du display e-link
spi:
  clk_pin: 18
  mosi_pin: 23

display:
#   model: 2.90inv2    #c'est ceci qui marche avec mon e-link TTGO T5 V2.3.1 _ 2.13 zf210505.0002
#   https://github.com/lewisxhe/GxEPD/blob/master/src/GxDEPG0213BN/GxDEPG0213BN.h
#   Résolution utilisable: 250x122 !   note: 128*250, the visible number of display pixels is 122*250, see GDEH0213B72 V1.1 Specification.pdf
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 17
    busy_pin: 4
    reset_pin: 16
    model: 2.90inv2
    id: z_eink
    rotation: 90°
    full_update_every: 1
    update_interval: 300s

#   http://www.linux-france.org/prj/embedded/sdcc/sdcc_course.formatted_io.html, pour se souvenir le formatage de printf ;-)
    lambda: |-
      int label_swidth = 250;   int label_sheight = 131; //TTGO T5 GDEM0213B74 (250 x 122)
      int label_col = 5;        int label_row = 3; //Numbers of columns and rows
      int label_x0 = 0;         int label_y0 = 25;
      int label_cwidth = label_swidth/label_col; //Calculation for the cell width   
      int label_cheight = (label_sheight-40)/label_row; //Calculation for the cell width 
      int label_xidx = 1;       int label_yidx = 1;
      
      int label_level = 1;      int label_level_height = 5;
      int label_level_y = label_cheight-label_level_height-2;
      int label_level_min = 1;  int label_level_max = 1;
      
      // Print header
      it.print(0, 4, id(font2), TextAlign::TOP_LEFT, "eInk HA Dashboard 1");
      it.printf(label_swidth, 4, id(font1), TextAlign::TOP_RIGHT, "%.2fV %.0f%%", id(bat_v).state, id(bat_per).state);

      // Print temperature Etage
      label_xidx = 1;      label_yidx = 1;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "T Etage");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.1f°C", id(temp_etage).state);
      
      label_level_min = 0;   label_level_max = 50;
      label_level = label_cwidth * ((id(temp_etage).state-label_level_min)/(label_level_max-label_level_min));
      if (id(temp_etage).has_state()) {
        it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);
      }      
      
      
      // Print humidity Etage
      label_xidx = 1;      label_yidx = 2;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "H Etage");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.0f%%", id(hum_etage).state);

      label_level = label_cwidth * 0.66;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);


      // Print battery Etage
      label_xidx = 1;      label_yidx = 3;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "B Etage");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%s", id(bat_etage).state.c_str());

      label_level = label_cwidth * 0.99;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);



      // Print temperature Rez
      label_xidx = 2;      label_yidx = 1;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "T Rez");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.1f°C", id(temp_rez).state);
      
      label_level_min = 0;   label_level_max = 50;
      label_level = label_cwidth * ((id(temp_rez).state-label_level_min)/(label_level_max-label_level_min));
      if (id(temp_rez).has_state()) {
        it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);
      }      
      
      
      // Print humidity Rez
      label_xidx = 2;      label_yidx = 2;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "H Rez");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.0f%%", id(hum_rez).state);

      label_level = label_cwidth * 0.66;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);


      // Print battery Rez
      label_xidx = 2;      label_yidx = 3;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "B Rez");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%s", id(bat_rez).state.c_str());

      label_level = label_cwidth * 0.99;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);



      // Print temperature SS
      label_xidx = 3;      label_yidx = 1;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "T SS");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.1f°C", id(temp_ss).state);
      
      label_level_min = 0;   label_level_max = 50;
      label_level = label_cwidth * ((id(temp_ss).state-label_level_min)/(label_level_max-label_level_min));
      if (id(temp_ss).has_state()) {
        it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);
      }      
      
      
      // Print humidity SS
      label_xidx = 3;      label_yidx = 2;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "H SS");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.0f%%", id(hum_ss).state);

      label_level = label_cwidth * 0.66;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);


      // Print battery SS
      label_xidx = 3;      label_yidx = 3;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "B SS");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%s", id(bat_ss).state.c_str());

      label_level = label_cwidth * 0.99;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);



      // Print temperature Ext
      label_xidx = 4;      label_yidx = 1;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "T Ext");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.1f°C", id(temp_ext).state);
      
      label_level_min = 0;   label_level_max = 50;
      label_level = label_cwidth * ((id(temp_ext).state-label_level_min)/(label_level_max-label_level_min));
      if (id(temp_ext).has_state()) {
        it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);
      }      
      
      
      // Print humidity Ext
      label_xidx = 4;      label_yidx = 2;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "H Ext");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.0f%%", id(hum_ext).state);

      label_level = label_cwidth * 0.66;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);


      // Print wind Ext
      label_xidx = 4;      label_yidx = 3;
      it.rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight, label_cwidth-1, label_cheight-1, COLOR_ON);
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight, id(font1), TextAlign::TOP_CENTER, "V Ext");
      it.printf(label_x0+(label_xidx-1)*label_cwidth+label_cwidth/2, label_y0+(label_yidx-1)*label_cheight+10, id(font1), TextAlign::TOP_CENTER , "%.1fkm/h", id(wind_ext).state);

      label_level = label_cwidth * 0.66;
      it.filled_rectangle(label_x0+(label_xidx-1)*label_cwidth, label_y0+(label_yidx-1)*label_cheight+label_level_y, label_level, label_level_height);



      // Print footer, WIFI SSID, signal, adrs ip, date, time
      it.printf(0, label_sheight, id(font1), TextAlign::BOTTOM_LEFT, "%s %.0f dB %s", id(wifi_ssid).state.c_str(), id(wifi_power).state, id(wifi_ip).state.c_str() );
      it.strftime(label_swidth, label_sheight, id(font1), TextAlign::BOTTOM_RIGHT, "%d.%m.%y %H:%M:%S", id(sntp_time).now());
